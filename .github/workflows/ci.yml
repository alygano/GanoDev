name: 🚀 CI/CD DevSecOps Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🧪 Tests et qualité de code
  code-quality:
    name: 🧪 Code Quality & Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: api_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: 🎨 Code formatting check (Black)
      run: black --check --diff .

    - name: 📋 Import sorting check (isort)
      run: isort --check-only --diff .

    - name: 🔍 Linting (flake8)
      run: flake8 .

    - name: 🧪 Run tests with coverage
      env:
        DATABASE_TEST_URL: postgresql://postgres:postgres@localhost:5432/api_test
        FLASK_ENV: testing
      run: |
        pytest src/tests/ -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

    - name: 📈 Archive coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: htmlcov/

  # 🔒 Sécurité et vulnérabilités
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 🔍 Python Security Check (Bandit)
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/

    - name: 🛡️ Dependency vulnerability scan (Safety)
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        safety check

    - name: 🔐 Secret detection (GitLeaks)
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # 🐳 Build et scan Docker
  docker-security:
    name: 🐳 Docker Build & Security
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🔍 Run Trivy vulnerability scanner (Image)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: 🔍 Run Trivy vulnerability scanner (Filesystem)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: 📊 Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: |
          trivy-image-results.sarif
          trivy-fs-results.sarif

  # 🚀 Déploiement conditionnel
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, docker-security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Ajouter ici vos scripts de déploiement
        # ex: kubectl, docker-compose, terraform, etc.

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, docker-security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: 🌟 Deploy to production
      run: |
        echo "🌟 Deploying to production environment..."
        # Ajouter ici vos scripts de déploiement
        # ex: kubectl, docker-compose, terraform, etc.

  # 📊 Notification et rapport
  notify:
    name: 📊 Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, docker-security]
    if: always()
    
    steps:
    - name: 📊 Pipeline Status
      run: |
        if [[ "${{ needs.code-quality.result }}" == "success" && 
              "${{ needs.security-scan.result }}" == "success" && 
              "${{ needs.docker-security.result }}" == "success" ]]; then
          echo "✅ Pipeline completed successfully!"
        else
          echo "❌ Pipeline failed!"
          exit 1
        fi
